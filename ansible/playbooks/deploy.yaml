- name: Деплой проекта
  hosts: servers
  become: true
  vars_files:
    - env.yaml
  become_user: '{{ user }}'
  vars:
    root: '../..'
    github_repo_path: 'https://github.com/{{ github_username }}/{{ github_repo }}.git'
    repo_path: '/home/{{ user }}/{{ github_repo }}'
    repo_docker_path: '{{ repo_path }}/docker'
    db_compose: 'compose.db.yaml'
    apps_compose: 'compose.yaml'
    static_path: '/usr/share/nginx/html'

  tasks:
    - name: Клонируем репозиторий
      git:
        repo: '{{ github_repo_path }}'
        dest: '{{ repo_path }}'
        accept_hostkey: yes
        force: yes
      become_user: 'root'

    - name: Копируем базовый env файл
      copy:
        src: '{{ root }}/.env'
        dest: '{{ repo_path }}/.env'
        force: yes
      become_user: '{{ user }}'

    - name: Копируем production env файл
      copy:
        src: '{{ root }}/.env.production'
        dest: '{{ repo_path }}/.env.production'
        force: yes
      become_user: '{{ user }}'

    - name: Копируем prompt файл
      copy:
        src: '{{ root }}/prompt.md'
        dest: '{{ repo_path }}/prompt.md'
        force: yes
      become_user: '{{ user }}'

    - name: Выполняем скрипт для установки переменных окружения
      shell: 'cd {{ repo_path }} && bun run copy:env:prod'
      become_user: 'root'

    - name: Логин в Docker Registry
      docker_login:
        username: '{{ docker_user }}'
        password: '{{ docker_password }}'

    - name: Создаем сеть daylik
      community.docker.docker_network:
        name: daylik
        state: present

    - name: Запускаем db docker compose
      community.docker.docker_compose_v2:
        project_src: '{{ repo_docker_path }}'
        files:
          - '{{ db_compose }}'
        state: present
      register: db_compose_result

    - name: Результаты db docker compose
      debug:
        msg: |
          ✅ DB Compose завершён.
          changed: {{ db_compose_result.changed | default(false) }}

    - name: Останавливаем apps docker compose
      community.docker.docker_compose_v2:
        project_src: '{{ repo_docker_path }}'
        files:
          - '{{ apps_compose }}'
        state: absent
      register: apps_stop_compose_result

    - name: Результаты остановки apps docker compose
      debug:
        msg: |
          ✅ Apps Compose остановлены и удалены
          changed: {{ apps_stop_compose_result.changed | default(false) }}

    - name: Запускаем apps docker compose
      community.docker.docker_compose_v2:
        project_src: '{{ repo_docker_path }}'
        files:
          - '{{ apps_compose }}'
        profiles:
          - all
        build: always
        state: present
      register: apps_compose_result

    - name: Результаты apps docker compose
      debug:
        msg: |
          ✅ Apps Compose запущены
          changed: {{ apps_compose_result.changed | default(false) }}

    - name: Создаем контейнер miniapp
      community.docker.docker_container:
        name: '{{ miniapp_name }}'
        image: daylik-miniapp
        state: present

    - name: Удаляем старую статику
      file:
        path: '{{ static_path }}'
        state: absent
      become_user: root

    - name: Копируем статику miniapp
      command: 'docker cp {{ miniapp_name }}:/app/apps/miniapp/dist {{ static_path }}'
      become_user: root

    - name: Удаляем контейнер miniapp
      community.docker.docker_container:
        name: '{{ miniapp_name }}'
        image: daylik-miniapp
        state: absent

    - name: Удаляем старые образы и контейнеры
      community.docker.docker_prune:
        containers: false
        images: true

    - name: Удаляем чувствительные файлы
      ansible.builtin.file:
        path: '{{ item }}'
        state: absent
      loop:
        - '{{ repo_path }}/.env'
        - '{{ repo_path }}/.env.production'
        - '{{ repo_path }}/docker/.env'
        - '{{ repo_path }}/packages/shared/.env'
