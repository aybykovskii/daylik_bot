- name: Деплой проекта
  hosts: servers
  become: true
  vars_files:
    - env.yaml
  become_user: "{{ user }}"
  vars:
    github_repo_path: "https://github.com/{{ github_username }}/{{ github_repo }}.git"
    repo_path: "/home/{{ user }}/{{ github_repo }}"
    docker_compose_apps_path: "{{ repo_path }}/docker-compose.production.yaml"
    docker_compose_db_path: "{{ repo_path }}/docker-compose.db.yaml"

  tasks:
  - name: Клонируем репозиторий
    git:
      repo: "{{ github_repo_path }}"
      dest: "/home/{{ user }}/{{ github_repo }}"
      accept_hostkey: yes
      force: yes
    become_user: "{{ user }}"

  - name: Копируем env файл
    copy:
      src: "../../.production.env"
      dest: "/home/{{ user }}/{{ github_repo }}/.env"
      force: yes
    become_user: "{{ user }}"

  - name: Копируем prompts файл
    copy:
      src: "../../prompts.json"
      dest: "/home/{{ user }}/{{ github_repo }}/prompts.json"
      force: yes
    become_user: "{{ user }}"

  - name:  Создаем daylik network
    docker_network:
      name: daylik
      state: present

  - name: Логин в Docker Registry
    docker_login:
      username: "{{ docker_user }}"
      password: "{{ docker_password }}"

  - name: Запускаем db docker compose
    community.docker.docker_compose_v2:
      project_src: "{{ repo_path }}"
      files: 
      - docker-compose.db.yaml
      state: present

  - name: Собираем apps docker образы
    command: "docker compose -f {{ docker_compose_apps_path }} build"

  - name: Проверяем запущен ли apps docker compose
    shell: "docker compose -f {{ docker_compose_apps_path }} ps -q"
    register: docker_compose_status

  - name: Останавливаем apps docker compose со старыми образами
    command: "docker compose -f {{ docker_compose_apps_path }} down"
    when: docker_compose_status.stdout != ''

  - name: Создаем контейнер miniapp без запуска
    docker_container:
      name: "{{ miniapp_name }}"
      image: daylik_bot-miniapp
      state: present

  - name: Удаляем старую статику
    command: "rm -rf {{ repo_path }}/static"
    become_user: root

  - name: Копируем статику miniapp
    command: "docker cp {{ miniapp_name }}:/app/apps/miniapp/dist {{ repo_path }}/static"
    become_user: root

  - name: Запускаем apps docker compose с новыми образами
    command: "docker compose -f {{ docker_compose_apps_path }} up -d"

  - name: Добавляем сиды в базу данных
    command: "docker compose -f {{ docker_compose_apps_path }} exec server pnpm run server:seed"
    become_user: root

  - name: Удаляем контейнер miniapp
    docker_container:
      name: "{{ miniapp_name }}"
      state: absent

  - name: Удаляем старые образы
    command: "docker image prune -f"