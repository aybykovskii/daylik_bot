services:
  base:
    build:
      context: .
      dockerfile: Dockerfile.base
    develop:
      watch:
        - action: sync+restart
          path: ./packages
          target: /app/packages
    image: aybykovskii/daylik-base:latest

  server:
    container_name: daylik-server
    build:
      context: .
      dockerfile: ./apps/server/Dockerfile
    develop:
      watch:
        - action: sync+restart
          path: ./apps/server
          target: /app/apps/server
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      SERVER_PORT: ${SERVER_PORT}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - '8080:${SERVER_PORT}'
    networks:
      - daylik
    depends_on:
      base:
        condition: service_started
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:${SERVER_PORT}/health' ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./packages/shared/logger/logs/server:/app/packages/shared/logger/logs/server

  telegram_bot:
    container_name: daylik-bot
    build:
      context: .
      dockerfile: ./apps/telegramBot/Dockerfile
    depends_on:
      base:
        condition: service_started
      server:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./apps/telegramBot
          target: /app/apps/telegramBot
    environment:
      BOT_PORT: ${BOT_PORT}
      TG_BOT_TOKEN: ${TG_BOT_TOKEN}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SERVER_PORT: ${SERVER_PORT}
    ports:
      - '3030:${BOT_PORT}'
    networks:
      - daylik
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:${BOT_PORT}/health' ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./packages/shared/logger/logs/bot:/app/packages/shared/logger/logs/bot

  miniapp:
    container_name: daylik-miniapp
    build:
      context: .
      dockerfile: ./apps/miniapp/Dockerfile
    depends_on:
      base:
        condition: service_started
      server:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./apps/miniapp
          target: /app/apps/miniapp
    environment:
      VITE_ENV: ${VITE_ENV}
      MINI_APP_PORT: ${MINI_APP_PORT}
      SERVER_PORT: ${SERVER_PORT}
    ports:
      - '3000:${MINI_APP_PORT}'
    networks:
      - daylik
    volumes:
      - ./packages/shared/logger/logs/miniapp:/app/packages/shared/logger/logs/miniapp

networks:
  daylik:
    external: true
