services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5432:5432'
    networks:
      - local
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - '5050:80'
    networks:
      - local
    depends_on:
      - postgres
  
  base:
    build:
      context: .
      dockerfile: Dockerfile.base
    develop:
      watch:
        - action: sync+restart
          path: ./packages
          target: /app/packages
    image: aybykovskii/daylik-base:latest

  server:
    build:
      context: .
      dockerfile: ./apps/server/Dockerfile
    develop:
      watch:
        - action: sync+restart
          path: ./apps/server
          target: /app/apps/server
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      SERVER_PORT: ${SERVER_PORT}
    ports:
      - '8080:8080'
    networks:
      - local
    depends_on:
      base:
        condition: service_started
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./packages/shared/logger/logs/server:/app/packages/shared/logger/logs/server

  telegram_bot:
    build:
      context: .
      dockerfile: ./apps/telegramBot/Dockerfile
    depends_on:
      base:
        condition: service_started
      server:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./apps/telegramBot
          target: /app/apps/telegramBot
    environment:
      BOT_PORT: ${BOT_PORT}
      TG_BOT_TOKEN: ${TG_BOT_TOKEN}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DOMAIN: ${DOMAIN}
      SERVER_PORT: ${SERVER_PORT}
    ports:
      - '3030:3030'
    networks:
      - local
    volumes:
      - ./packages/shared/logger/logs/bot:/app/packages/shared/logger/logs/bot

  miniapp:
    build:
      context: .
      dockerfile: ./apps/miniapp/Dockerfile.production
    depends_on:
      base:
        condition: service_started
      server:
        condition: service_healthy
    environment:
      VITE_ENV: ${VITE_ENV}
      MINI_APP_PORT: ${MINI_APP_PORT}
      SERVER_PORT: ${SERVER_PORT}
    networks:
      - local
    volumes:
      - ./packages/shared/logger/logs/miniapp:/app/packages/shared/logger/logs/miniapp

volumes:
  postgres_data:

networks:
  local:
    driver: bridge